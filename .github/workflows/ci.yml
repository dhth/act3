name: ci

on:
  pull_request:
  push:
    branches:
      - 'main'

env:
  GO_VERSION: '1.24.4'

jobs:
  changes:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
      contents: read
    outputs:
      code: ${{ steps.filter.outputs.code }}
      workflows: ${{ steps.filter.outputs.workflows }}
      yml: ${{ steps.filter.outputs.yml }}
    steps:
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            code:
              - "cmd/**"
              - "internal/**"
              - ".golangci.yml"
              - "go.*"
              - "main.go"
              - "**/*.go"
              - ".github/workflows/pr.yml"
            workflows:
              - '.github/workflows/**.yml'
            yml:
              - '**.yml'
              - '**.yaml'
              - ".github/workflows/pr.yml"

  build:
    needs: changes
    if: ${{ needs.changes.outputs.code == 'true' }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: go build
        run: go build -v ./...
      - name: go test
        run: go test -v ./...

  lint:
    needs: changes
    if: ${{ needs.changes.outputs.code == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v8
        with:
          version: v2.1

  vulncheck:
    needs: changes
    if: ${{ needs.changes.outputs.code == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: govulncheck
        shell: bash
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          govulncheck ./...

  lint-yaml:
    needs: changes
    if: ${{ needs.changes.outputs.yml == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - uses: dhth/composite-actions/.github/actions/lint-yaml@main

  lint-workflows:
    needs: changes
    if: ${{ needs.changes.outputs.workflows == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - uses: dhth/composite-actions/.github/actions/lint-actions@main

  run:
    needs: changes
    if: ${{ github.actor != 'dependabot[bot]' && needs.changes.outputs.workflows == 'true' }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: go build
        shell: bash
        run: go build .
      - name: Generate GH token
        id: generate-token
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ vars.GH_TOKEN_APP_ID }}
          private-key: ${{ secrets.GH_TOKEN_APP_PRIVATE_KEY }}
      - name: Run act3 with default output
        shell: bash
        run: ./act3
        env:
          GH_TOKEN: ${{ steps.generate-token.outputs.token }}
      - name: Run act3 with tabular output
        shell: bash
        run: ./act3 -f table
        env:
          GH_TOKEN: ${{ steps.generate-token.outputs.token }}
      - name: Run act3 with HTML output
        shell: bash
        run: ./act3 -f html
        env:
          GH_TOKEN: ${{ steps.generate-token.outputs.token }}
